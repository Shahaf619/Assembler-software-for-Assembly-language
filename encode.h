/*======================================================================================================================================*/
/*---------------------------------------------macro for encoding functions-------------------------------------------------------------*/
/*======================================================================================================================================*/
#define ARE_SIZE 2
#define DES_SIZE 3
#define SRC_SIZE 3
#define SRC_SIZE 3

/*======================================================================================================================================*/
/*----------------------------------------macro for convert binary to demcal------------------------------------------------------------*/
/*======================================================================================================================================*/
#define to_demical(size, type, mask_val)\
for ( mask = mask_val, i = 0; i < size; i++, mult *=2 )\
    {\
         if (type & mask)\
         {\
             sum += mult;\
         }\
         mask <<= 1;\
    }

/*======================================================================================================================================*/
/*---------------------------------------------defining base_64 structure---------------------------------------------------------------*/
/*======================================================================================================================================*/
char base_64[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                  'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                  'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                  'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                  'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                  'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                  'w', 'x', 'y', 'z', '0', '1', '2', '3',
                  '4', '5', '6', '7', '8', '9', '+', '/'};

/*=======================================================================================================================================*/
/*-------------------------------------------complete convert_to_binary function---------------------------------------------------------*/
/*=======================================================================================================================================*/
#define to_binary(bit_num,sector) \
    bit = bit_num; \
    while (address.sector ) \
    {\
        if ( (address.sector % 2) != 0 ) \
             bits[bit--] = BIT_VAL_1; \
        else\
            bits[bit--] = BIT_VAL_0; \
        address.sector /= 2; \
    }

/*=======================================================================================================================================*/
/*------------------------------------------------start bit positions--------------------------------------------------------------------*/
/*=======================================================================================================================================*/
#define START_SRC 2
#define START_OP 6
#define START_DES 9
#define START_ARE 11







